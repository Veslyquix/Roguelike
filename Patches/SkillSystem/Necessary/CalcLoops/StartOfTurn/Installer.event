PUSH
ORG $59A290 // MapMain Phase Switch GFX 
PROC_NEW_CHILD_BLOCKING(StartOfTurnCalcLoop_Proc) 
POP

ALIGN 4 
StartOfTurnCalcLoop: 
// End of turn effects first 
POIN HoardersBane // Effects that use an animation (eg. are blocking procs) return true 
POIN HoardersBane2 // also heal like a vulnerary does not update hp at the end of the animation like it does in events 
POIN HoardersBane3 
POIN BreakHere 
POIN ProcessDebuffs ArmorMarch_StartOfTurn VigorDanceReset // Standalone things that loop through all units 
POIN StartOfTurnUnitLoop // Skills that have been optimized to have their effects ran from a table 
WORD 0 


ALIGN 4
StartOfTurnCalcLoop_Proc:
PROC_YIELD // Buffer.
PROC_SET_NAME(StartOfTurnCalcLoopName)
//PROC_SLEEP(0)
PROC_CALL_ROUTINE(StartOfTurnCalcLoop_Init)
PROC_LOOP_ROUTINE(StartOfTurnCalcLoop_Main) // Skipped over if there are no units that will act for that allegiance 
PROC_NEW_CHILD_BLOCKING(0x859AF80) // Phase Switch GFX 

PROC_END

ALIGN 4
StartOfTurnCalcLoop_SomeFunctionProc:
PROC_YIELD // Buffer.
PROC_SET_NAME(StartOfTurnCalcLoopName)
PROC_SLEEP(0)
PROC_LOOP_ROUTINE(StartOfTurnCalcLoop_SomeFunction)
PROC_END


StartOfTurnCalcLoopName:
String("StartOfTurnCalcLoop") ; BYTE 0
ALIGN 4

ALIGN 4 
StartOfTurn_List: 
POIN ArmorMarch_StartOfTurn VigorDanceReset StartOfTurnUnitLoop
WORD 0 

// Below is optional but more efficient 
// Executes a function where the unit has already been deemed to be on the field with the relevant skill 
// loops through all units, checks if fielded, creates a buffer of skills, then runs the function for each skill ID that has an entry here 
ALIGN 4 
StartOfTurn_SkillTable: 
FILL(256*4) 

#define StartOfTurnFunctionEntry(skillID, function) "PUSH; ORG StartOfTurn_SkillTable+(skillID*4); POIN function|1; POP" 

StartOfTurnFunctionEntry(HoneMagID, HoneMag) 
StartOfTurnFunctionEntry(HoneStrID, HoneStr) 
StartOfTurnFunctionEntry(HoneSklID, HoneSkl) 
StartOfTurnFunctionEntry(HoneSpdID, HoneSpd) 
StartOfTurnFunctionEntry(HoneDefID, HoneDef) 
StartOfTurnFunctionEntry(HoneResID, HoneRes) 
StartOfTurnFunctionEntry(HoneLukID, HoneLuk) 
StartOfTurnFunctionEntry(HoneMovID, HoneMov) 
StartOfTurnFunctionEntry(MagOathID, OathMag) 
StartOfTurnFunctionEntry(StrOathID, OathStr) 
StartOfTurnFunctionEntry(SklOathID, OathSkl) 
StartOfTurnFunctionEntry(SpdOathID, OathSpd) 
StartOfTurnFunctionEntry(DefOathID, OathDef) 
StartOfTurnFunctionEntry(ResOathID, OathRes) 
StartOfTurnFunctionEntry(LukOathID, OathLuk) 
StartOfTurnFunctionEntry(MovOathID, OathMov) 
StartOfTurnFunctionEntry(RouseMagID, RouseMag) 
StartOfTurnFunctionEntry(RouseStrID, RouseStr) 
StartOfTurnFunctionEntry(RouseSklID, RouseSkl) 
StartOfTurnFunctionEntry(RouseSpdID, RouseSpd) 
StartOfTurnFunctionEntry(RouseDefID, RouseDef) 
StartOfTurnFunctionEntry(RouseResID, RouseRes) 
StartOfTurnFunctionEntry(RouseLukID, RouseLuk) 
StartOfTurnFunctionEntry(RouseMovID, RouseMov) 

StartOfTurnFunctionEntry(CleverInitID	, CleverInit) 
StartOfTurnFunctionEntry(StrongInitID	, StrongInit) 
StartOfTurnFunctionEntry(DeftInitID		, DeftInit	) 
StartOfTurnFunctionEntry(QuickInitID		, QuickInit	) 
StartOfTurnFunctionEntry(LuckyInitID		, LuckyInit	) 
StartOfTurnFunctionEntry(SturdyInitID	, SturdyInit) 
StartOfTurnFunctionEntry(CalmInitID		, CalmInit	) 
StartOfTurnFunctionEntry(NimbleInitID	, NimbleInit) 
StartOfTurnFunctionEntry(SpectrumInitID	, SpectrumInit) 


#include "StartOfTurn_CalcLoop.lyn.event" 


