#ifndef UNIT_MENU
#define UNIT_MENU

#define AlwaysUsable 0x804f449
#define NeverUsable  0x804f451 

#include "Extensions/Hack Installation.txt"
#include "_UnitMenuDefs.event"


#define UnitMenuWidth 9 
#define ChMenuWidth 9
#define UnitMenuLeft 2 // submenu ignores this 
#define UnitMenuRight 21 
#define ChMenuRight 21

//#include "SubMenu/Installer.event"

PUSH
  // Repoint Unit Menu
  ORG $59D1F8
    POIN UnitMenuTable

// Make all menus that are too far to the right to start at this x coord 
ORG $4EBB6 
//BYTE GeneralMenusLeft 

// Make the chapter menu wider 
ORG $59D216 
BYTE ChMenuWidth 
ORG $1CA86 
BYTE ChMenuRight // 0x17 default 





  // Make the unit menu wider (to fit longer words)
  ORG $59d1f2 
    BYTE UnitMenuWidth

  ORG $1d4fa
    BYTE UnitMenuLeft // left x coord (open 1)

  ORG $1d4fc
    BYTE UnitMenuRight // right x coord (open 1)

  ORG $1D44E
    BYTE UnitMenuLeft // left x coord (open 2)

  ORG $1D450
    BYTE UnitMenuRight // right x coord (open 2)

  /*

  Goddammit Teq (capture hooks here too)

  ORG $22882
    BYTE $01 // left x coord (go back 1)
  */
ORG $22884 // Capture returns here 
BYTE UnitMenuRight // Capture 

  ORG $22818
    BYTE UnitMenuLeft // left x coord (go back 2)

  ORG $2281A
    BYTE UnitMenuRight // right x coord (go back 2)

  ORG $22772
    BYTE UnitMenuLeft // left x coord (go back 3)

  ORG $22774
    BYTE UnitMenuRight // right x coord (go back 3)

  ORG $23660
    BYTE UnitMenuLeft // left x coord (go back 4)

  ORG $23662
    BYTE UnitMenuRight // right x coord (go back 4)

POP

ALIGN 4         //Insert new commands where you want them to appear in the menu
UnitMenuTable:
  //Use the macro MenuCommand(name,description,colour,usability,effect)
  //Color options: NormalText, GrayText, BlueText, OrangeText, GreenText (flashes), BlackText
  #ifdef __DEBUG__
    MenuCommand(UM_EditSkill, UM_EditSkillDesc, OrangeText, $04F449, SkillDebugCommand_OnSelect)
  #endif

  MenuCommand(0x67A, 0x6CC, BlueText, $22FDC, $23020)
  // UM_Seize
  #ifdef ESCAPE_ARRIVE
    MenuCommand(ArriveName, ArriveDesc, BlueText, ArriveCommandUsability, ArriveCommandEffect)
    MenuCommand(EscapeName, EscapeDesc, BlueText, EscapeCommandUsability, EscapeCommandEffect)
  #endif // ESCAPE_ARIVE
  
  #ifdef DRAGON_VEINS
  MenuCommand(UMText_DV, UMText_DVDesc, GreenText, VeinUsability, VeinEffect)
  #endif // DRAGON_VEINS
  
  // UM_Attack
  MenuCommand(0x67b, 0x6c0, NormalText, $249ac, AttackEffect, $22c31, $22c99) //to clear flags
  // UM_Attack_B
  MenuCommand(0x67b, 0x6c0, NormalText, $24a28, AttackEffect, $22c31, $22c99)
  #ifdef GAIDEN_MAGIC
	MenuCommand(UM_GaidenBlackMagic,UM_GaidenMagicDesc,NormalText,GaidenBlackMagicUMUsability,GaidenBlackMagicUMEffect,GaidenBlackMagicUMHover,GaidenMagicUMUnhover)
	MenuCommand(UM_GaidenWhiteMagic,UM_GaidenMagicDesc,NormalText,GaidenWhiteMagicUMUsability,GaidenWhiteMagicUMEffect,GaidenWhiteMagicUMHover,GaidenMagicUMUnhover)
  #endif // GAIDEN_MAGIC
  #ifdef COMBAT_ARTS
	MenuCommand(UM_CombatArts, UM_CombatArtsDesc, NormalText, CombatArtsUsability, CombatArtsEffect, $22c31, $22c99)
  #else // COMBAT_ARTS
	//Lunge
	MenuCommand(UM_Lunge, UM_LungeDesc, NormalText, LungeUsability, LungeEffect, $22c31, $22c99)

	//Mercy
	MenuCommand(UM_Mercy, UM_MercyDesc, NormalText, MercyUsability, MercyEffect, $22c31, $22c99)

	//Gamble
	MenuCommand(UM_Gamble, UM_GambleDesc, NormalText, GambleUsability, GambleEffect, $22c31, $22c99)

	//Capture
	MenuCommand(UM_Capture, UM_CaptureDesc, NormalText, Capture_Usability, Capture_Effect_Func, $22c31, $22c99)
  #endif // COMBAT_ARTS

  UM_Staff
  UM_Ride
  UM_Exit
  UM_Play
  
  //UM_Dance
  MenuCommand(0x67E,0x6C2,NormalText,NewDanceUsability,0x231D0)

#ifdef INSTALL_AoE
#define MenuCommand_BPress(name,description,colour,usability,effect, unknown2) "WORD $80d7d94; SHORT name description; BYTE colour $4e; SHORT 0; POIN usability|1; WORD 0; POIN effect|1; POIN 0 0 unknown2|1"
  MenuCommand_BPress(UM_AoEName, UM_AoEDesc, NormalText, AoE_AreAnyUsable, AoE_Effect, AoE_ClearGraphics)
#endif 



  UM_Steal
  
  //UM_Summon
  MenuCommand(0x693,0x6DD,NormalText,NewSummonUsability,0x244B8)
  
  UM_Summon_DK
  UM_Pick

#ifndef COMBAT_ARTS

#ifdef HAX_RALLIES
  // Rally preview conflicts with window semitransparency changes
  // So we only add that in if it is disabled
#ifdef SEMITRANSPARENCY_CHANGES
  MenuCommand(UM_Rally, UM_RallyDesc, NormalText, RallyCommandUsability, RallyCommandEffect)
#else
  MenuCommand(UM_Rally, UM_RallyDesc, NormalText, RallyCommandUsability, RallyCommandEffect, RallyCommandSwitchIn, RallyCommandSwitchOut)
#endif

#endif // HAX_RALLIES

#endif // COMBAT_ARTS

  // UM_Talk
  MenuCommand(0x680, 0x6c9, GreenText, 0x23c81, 0x23cc5)
  // UM_Support
  MenuCommand(0x681, 0x6ca, GreenText, 0x23d15, 0x23d65)
  UM_Visit
  
  #ifdef RAID
    MenuCommand(RaidNameText,RaidDescText,NormalText,RaidUsability,RaidEffect)
  #endif // RAID
  
  #ifdef STAIRS_ASM
	MenuCommand(StairsNameText,StairsDescText,GreenText,StairsUsability,StairsEffect)
  #endif // STAIRS_ASM
  
  UM_Chest
  UM_Door

 MenuCommand(UM_Shop, UM_ShopDesc, NormalText, ShopTrapUsability, ShopTrapEffect) //Attack
 MenuCommand(UM_Chest2, UM_ChestDesc2, NormalText, ChestTrapUsability, ChestTrapEffect) //Attack
 MenuCommand(UM_Visit2, UM_VisitDesc2, NormalText, VisitTrapUsability, VisitTrapEffect) //Attack
 MenuCommand(UM_Door2, UM_DoorDesc2, NormalText, DoorTrapUsability, DoorTrapEffect) //Attack
 MenuCommand(UM_Break, UM_BreakDesc, NormalText, BreakableWallTrapUsability, BreakableWallTrapEffect) //Attack
 MenuCommand(UM_Armoury, UM_ArmouryDesc, NormalText, ArmouryTrapUsability, ArmouryTrapEffect) //Attack
 MenuCommand(UM_Shop, UM_ShopDesc, NormalText, SecretShopTrapUsability, SecretShopTrapEffect) //Attack


  UM_Armory
  UM_Vendor
  UM_Secret
  UM_Arena
  	
  #ifndef COMBAT_ARTS
	// Shove & cie
	MenuCommand(UM_Shove,      UM_ShoveDesc,      NormalText, prShoveCommand_Usability,      prShoveCommand_Effect)
	MenuCommand(UM_Smite,      UM_SmiteDesc,      NormalText, prSmiteCommand_Usability,      prSmiteCommand_Effect)
	MenuCommand(UM_Pivot,      UM_PivotDesc,      NormalText, prPivotCommand_Usability,      prPivotCommand_Effect)
	MenuCommand(UM_Reposition, UM_RepositionDesc, NormalText, prRepositionCommand_Usability, prRepositionCommand_Effect)
	MenuCommand(UM_Swap,       UM_SwapDesc,       NormalText, prSwapCommand_Usability,       prSwapCommand_Effect)
	MenuCommand(UM_Swarp,      UM_SwarpDesc,      NormalText, prSwarpCommand_Usability,      prSwarpCommand_Effect)
  #endif // COMBAT_ARTS
  
  UM_Rescue
  UM_Give
  UM_Take
  // MenuCommand(0x689, 0x6c5, 0, 0x228a4, RescueEffect) //rescue
  // MenuCommand(UMText_Transfer,UMText_TransferDesc,GreenText,TransferUsability,TransferTarget) //transfer
  // MenuCommand(UMText_Switch,UMText_SwitchDesc,GreenText,SwitchUsability,SwitchCommand)   //switch
  UM_Drop

  #ifdef __DEBUG__
    MenuCommand(UM_EditSkill, UM_EditSkillDesc, OrangeText, $04F449, SkillDebugCommand_OnSelect)
  #endif

  UM_Item
  UM_Trade
  
  //UM_Supply
  MenuCommand(0x68F,0x6D5,GreenText,NewSupplyUsability,0x23FB8)
  
// Wait (edited to show an arrow) 
//BYTE 0x94 0x7D 0xD 0x8 0x95 0x6 0xBF 0x6 0x0 0x6B 0x0 0x0 0x49 0xF4 0x4 0x8; POIN DisplayedWaitmarkIfSubMenu+1; BYTE 0x39 0x27 0x2 0x8 0 0 0 0 0 0 0 0 0 0 0 0	//	待機 wait
  UM_Wait

  UM_Separator 

#endif // UNIT_MENU



