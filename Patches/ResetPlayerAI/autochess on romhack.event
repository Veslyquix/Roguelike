#include "eastdlib.event" 
#include "Extensions/AI Assembly.txt" 
#include "ProcDefinitions.txt" 
#ifndef callHackNew 
	#define callHackNew(offset) 		"BYTE $01 $4B $9E $46 $00 $F8 $01 $E0; POIN (offset|0x1)"
#endif 

//#define ENABLE_100_GROWTH

PUSH 
ORG $39722 
SHORT $2100 // Berserked units won't attack their own allegiance 

ORG $397F6
SHORT $46C0 // Everyone acts berserked at the end of the turn if they haven't moved 
ORG $3981C 
callHackNew(OrderBerserkPhase)
//ORG $5A8412 
//BYTE 4 // Default safety as 4 
ORG $5A8391 
BYTE 66 // Recovery mode for enemies / NPCs 
ORG $5A8395 
BYTE 66 // Recovery mode at 66% hp, stop recovery mode at 80% 

ORG $D81F0 // Ai3 = 0x30 
BYTE 1 1 1 0 1 1 4 2 // Default AI3 to be more cautious 

ORG $30DA6 
BYTE $d0 $22 // Autocursor off 

ORG $16B06
SHORT $E003 // items always have the unbreakable bitflag 
ORG $17574
jumpToHack(GetItemAttributesWithUnbreakable)

ORG $AD8 
BYTE 0x09 0xF0 0x16 // Ensure Debug Menu does not show up 

ORG $D8538 // Ensure door keys may be used in every chapter 
BYTE 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0
BYTE 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0
BYTE 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0
BYTE 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0
BYTE 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0
BYTE 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0 7 0 0 0

ORG $5A8184 
BYTE 0x23 // MoveTowards Gate 0x0B, Throne 0x1F, Gate 0x23

// in 803F018 after pressing F8 and setting r0 to 1, it runs away 
// gAiScriptEndedFlag = 0x30017C8 as True/False 
// 803CDE6
// 803F13C


// in 0x803CE18 calls AiGetClosestUnit 803A924 
// Which calls are units allied at 803A9bC 
// r0=85A813C
// [202D29C]!?? 

// [3007CA8+C] [3007CE0]!!
// [3007C28+C]!!
// in 803BA08 AiTryMoveTowards r10 is the Safety 
// at 3BB5C and 3BB1E 
// In IsAiTileSafeEnough at 0x803E448 
// if Safety in Movemap2 at coord is worse than Safety from AI2, 
// then try next AI2 option 

// store safety into 82, then 803CA84 (atk only when adjacent?) 
// 803CA0D 

// call AiScript_Exec at 803C5DC with the address of the line from the ai to exec 
// gAiScriptEndedFlag is s8 0x30017C8 
// gBoolIsAI2 is u32 0x30017CC 
// AiExecAi1 called at 39E10 which is 803C4BC first checks AiData+0x7B and 4
// the 4 is for berserk actions 
// 803DF10 calls ShouldAiNotBattle 803DEC4 which could be useful 
// [30017C8]!
// 0x803D69C 
ORG $5A8890 
Routine_AI(CallAttack05, 0)
BYTE 0x03 0x00 0xFF 0; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Exit1 

ORG $5A88B0
Routine_AI(CallAttack05_Promoted, 0)
BYTE 0x03 0x00 0xFF 0; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Exit1 

ORG $5A8690 // Non-promoted AI2 
//Routine_AI(
//BYTE 0x18 0x00 0x8 0x00; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Move towards walls etc. with safety = 8 (but the safety doesn't work) 
//ConditionalGoto(4, EQ, 1)
Routine_AI(BreakWallIfSafe, 0) 
BYTE 0x03 0x00 0xFF 0; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Exit0 
//Label(1)
//BYTE 0x13 0x00 0x6 0x00; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Move towards walls etc. with safety = 6 (duplicate because safety doesn't work on move to walls) 
//Routine_AI(TryMoveIfSafe, 0)
//BYTE 0x03 0x00 0xFF 1; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Exit1 


//ORG $5A8790 // Lord AI2
//BYTE 0x11 0x00 0x8 0x00; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Run away 
//BYTE 0x03 0x00 0xFF 0; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Exit0


//ORG $5A9060 // Promoted / Jeigan AI2
////BYTE 0x12 0x00 0x8 0x00; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Move towards opponents with safety 8 
//BYTE 0x18 0x00 0xFF 0x00; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Move towards opponents even when blocked with safety 8 
//ConditionalGoto(4, EQ, 1)
//BYTE 0x03 0x00 0xFF 0; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Exit0 
//Label(1)
//BYTE 0x12 0x00 0xFF 0x00; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Move towards opponents with safety 8 
//BYTE 0x03 0x00 0xFF 1; WORD 0x00000000; WORD 0x00000000; WORD 0x00000000 // Exit1 


// RNG Randomizer 
ORG 0x1336
BYTE 0x08 0xB4 // push r3
jumpToHack(RNGBodyFE8)

ORG 0x0A4C
jumpToHack(bootHackBodyFE8)

ORG 0xC3C
jumpToHack(resumeHackBodyFE8)

ORG $83ECC 
jumpToHack(ResetPlayerAI|1)

#ifdef ENABLE_100_GROWTH
ORG $2A2D8 // this is right after check for lvl up 
callHackNew(OneHundredGrowth)
#endif 

ORG $D2F7C // overwrite vsprintf (debug print text) 
ResetPlayerAI: // also gives a vuln to all players that don't have one 
#include "ResetPlayerAI.lyn.event"


ALIGN 4
RNGBodyFE8:
BYTE $08 $BC $11 $48 $00 $68 $00 $28 $07 $D0 $10 $48 $00 $78 $00 $28 $07 $D1 $0C $48 $00 $F0 $0D $F8 $03 $E0 $0D $48 $00 $78 $00 $28 $F3 $D1 $0C $48 $00 $68 $00 $28 $01 $D0 $00 $F0 $02 $F8 $04 $48 $00 $47 $00 $47 $C0 $46 $C0 $46 $C0 $46 $C0 $46 $C0 $46 $C0 $46 $43 $13 $00 $08 $65 $0C $00 $08 $EC $A4 $03 $02 $FF $BC $02 $02 $6A $4E $00 $03 $B8 $4C $02 $02
ALIGN 4
bootHackBodyFE8:
BYTE $44 $42 $04 $43 $E4 $0F $20 $1C $01 $B4 $06 $4B $07 $48 $18 $60 $05 $4B $07 $48 $18 $70 $01 $BC $01 $4B $18 $47 $C0 $46 $C0 $46 $55 $0A $00 $08 $EC $A4 $03 $02 $6A $4E $00 $03 $FF $FF $FF $FF $FF $00 $00 $00
ALIGN 4
resumeHackBodyFE8:
BYTE $01 $88 $51 $80 $50 $88 $90 $80 $01 $B4 $06 $4B $07 $48 $18 $60 $05 $4B $06 $48 $18 $70 $01 $BC $01 $4B $18 $47 $C0 $46 $C0 $46 $45 $0C $00 $08 $EC $A4 $03 $02 $6A $4E $00 $03 $00 $00 $00 $00

ALIGN 4 
GetItemAttributesWithUnbreakable: 
BYTE $89 $00 $03 $48 $00 $68 $09 $18 $88 $68 $08 $21 $08 $43 $70 $47 $80 $75 $01 $08
#ifdef ENABLE_100_GROWTH
ALIGN 4 
OneHundredGrowth:
BYTE $00 $B5 $30 $1C $16 $4B $9E $46 $00 $F8 $38 $1C $14 $4B $9E $46 $00 $F8 $14 $4B $18 $7A $70 $21 $C9 $18 $09 $78 $88 $42 $0A $DD $73 $22 $9B $18 $01 $20 $18 $70 $58 $70 $98 $70 $D8 $70 $18 $71 $58 $71 $98 $71 $D8 $71 $0C $4B $18 $7A $70 $21 $C9 $18 $09 $78 $88 $42 $0A $DD $73 $22 $9B $18 $01 $20 $18 $70 $58 $70 $98 $70 $D8 $70 $18 $71 $58 $71 $98 $71 $D8 $71 $01 $BC $00 $47 $00 $00 $C8 $44 $0A $08 $EC $A4 $03 $02 $6C $A5 $03 $02
#endif 
#include "ai-fast-danger/Installer.event" 

ALIGN 4
WaitUntilAIMovesProc:
PROC_YIELD // Buffer.
PROC_SET_NAME(WaitUntilAIMovesProcName)
PROC_SLEEP(0)
PROC_LOOP_ROUTINE(WaitUntilAIMoves)
PROC_CALL_ROUTINE(CallProvidedRoutine)
PROC_END


WaitUntilAIMovesProcName:
String("CustomAIPausedBecauseUnitIsMoving") ; BYTE 0
ALIGN 4




POP 









