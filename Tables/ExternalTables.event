
#define WepDebuffEntry(mag, str, skl, spd, def, res, luk, mov) "BYTE (0-mag & 0xBF) (0-str & 0xBF) (0-skl & 0xBF) (0-spd & 0xBF) (0-def & 0xBF) (0-res & 0xBF) (0-luk & 0xBF) (0-mov & 0xBF)" 
#define WepBuffEntry(mag, str, skl, spd, def, res, luk, mov) "BYTE mag str skl spd def res luk mov" 

// for negative numbers, 2nd highest bitflag is assumed to always be on 
// don't use negative numbers below -64 
#define SwapWhoToAffect 0x40 
#define AffectSelf 0x40 
#define AffectOpponent 0x40 
// max boost is +63/-63 and is definable based on # of bits (31 and 15 also work) 
// values above the max will just be capped 
ALIGN 4 
NewWeaponDebuffTable: // BuffEnemy bitflag 0x40? DebuffSelf bitflag 0x40? 
// 				mag, str, skl, spd, def, res, luk, mov
BYTE 0 0 0 0 0 0 0 0 // do nothing for 0th entry 

WepDebuffEntry( 21,  22,   23,    24,   25,   26,   27,   28 ) 
ORG NewWeaponDebuffTable+8 
BYTE 21|AffectOpponent 
ORG NewWeaponDebuffTable+16
WepBuffEntry( 1|AffectOpponent, 2, 3, 4, 5, 6, 7, 8) 
WORD 0xFFFFFFFF 0xFFFFFFFF // For FEBuilder to show no further data with 


WeaponDebuffTable:
defWeaponDebuffs(0,0,0,0,0,0,0) //0x0: let 0-index entry be no debuffs.
defWeaponDebuffs(0,1,1,0,2,2,0) //0x1: Bronze Shuriken debuff.
defWeaponDebuffs(2,0,0,0,3,3,0) //0x2: Iron Shuriken debuff.
defWeaponDebuffs(3,0,0,0,4,4,0) //0x3: Steel Shuriken debuff.
defWeaponDebuffs(0,0,4,0,4,4,0) //0x4: Silver Shuriken debuff.
defWeaponDebuffs(4,0,4,0,4,4,0) //0x5: Pebble debuff.

//list of effect ids used by promotion items
//this is the list for promo items that are usable on the prep screen
#ifndef Promotion_IEList
	 #define Promotion_IEList
	PromoEffectList:
	BYTE	0x19	//Hero Crest
	BYTE	0x1A	//Knight Crest
	BYTE	0x1B	//Orion's Bolt
	BYTE	0x1C	//Elysian Whip
	BYTE	0x1D	//Guiding Ring
	BYTE	0x2D	//Master Seal
	BYTE	0x2F	//Heaven Seal
	BYTE	0x30	//Ocean Seal
	BYTE	0x31	//Lunar Brace
	BYTE	0x32	//Solar Brace

	BYTE 0x0	//end of list
#endif

#ifndef ChestKey_IEList
	#define ChestKey_IEList

	ChestKeyEffectList:
	//list of effect ids the ai will check for as chest keys
	BYTE 0x1E	//Chest Key
	BYTE 0x20	//Lockpick
	BYTE 0x26	//Master Key

	BYTE 0x0	//end of list
#endif

#ifndef SelfHealingIEList
	#define SelfHealingIEList
	/*
	The order of this list doesn't matter, priority is determinded by the order of the healing items in the unit's inventory
	For example, if the unit's inventory is [IronSword, Vulnerary, Elixir] the unit will use the vulnerary first when 
	trying to heal even though the elixir restores more. might try to mess with this at a later date but this is how the ai behaves in vanilla
	*/

	SelfHealItemEffectList:
	//List of healing items effects usable by the AI
	BYTE 0x21	//Heal 10 hp effect (Vulnerary)
	BYTE 0x22	//Heal all hp effect (Eilxir)
	BYTE 0x33	//Heal based on value in item data(new effect)

	BYTE 0x0	//end of list
#endif
